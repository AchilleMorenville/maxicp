name: Test and Coverage

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        maven: ['3.8.5']
        java: ['21']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3  # Updated from v1 to v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}

      - name: Cache Maven dependencies
        uses: actions/cache@v3  # Updated to v3
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-${{ matrix.java }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-${{ matrix.java }}-

      - name: Setup Maven
        uses: s4u/setup-maven-action@v1.18.0
        with:
          java-version: ${{ matrix.java }}
          maven-version: ${{ matrix.maven }}

      - name: Generate test coverage
        id: coverage
        run: |
          echo "compiling"
          mvn compile
          echo "testing"
          mvn test
          echo "jacoco reporting"
          mvn jacoco:report
          echo "extract coverage value"
          
          # Ensure the JaCoCo report file exists before processing
          if [ -f target/site/jacoco/index.html ]; then
          COVERAGE=$(sed -nE 's/.*<td>Total<\/td><td class="bar">[^<]+<\/td><td class="ctr2">([0-9]+)%<\/td>.*/\1/p' target/site/jacoco/index.html)
          echo "display=$COVERAGE%" >> $GITHUB_ENV    # with "%"
          echo "coverage=$COVERAGE" >> $GITHUB_ENV    # without "%"
          else
          echo "Jacoco report not found, setting coverage to 0"
          echo "display=0%" >> $GITHUB_ENV
          echo "coverage=0" >> $GITHUB_ENV
          fi

      - name: Extract branch name
        id: extract_branch
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Checkout badges branch
        uses: actions/checkout@v3  # Updated from v1 to v3
        with:
          ref: badges
          path: badges

      - name: Create badges directory if necessary
        run: mkdir -p badges/${{ env.branch }}

      - name: Generate the badge SVG using Shields.io
        run: |
          # Ensure COVERAGE is extracted and is a valid number
          COVERAGE="${{ env.coverage }}"
          
          # Debugging: Print coverage value
          echo "Extracted Coverage: $COVERAGE"
          
          # Validate that COVERAGE is a number
          if [[ ! "$COVERAGE" =~ ^[0-9]+$ ]]; then
            echo "Error: COVERAGE is not a valid number ('$COVERAGE'). Defaulting to 0."
            COVERAGE="0"
          fi
          
          # Assign color based on coverage percentage
          if [ "$COVERAGE" -gt 90 ]; then COLOR="green"
          elif [ "$COVERAGE" -gt 80 ]; then COLOR="yellowgreen"
          elif [ "$COVERAGE" -gt 70 ]; then COLOR="yellow"
          elif [ "$COVERAGE" -gt 60 ]; then COLOR="orange"
          else COLOR="red"
          fi
          
          # Debugging: Print the final values
          echo "Final Coverage: $COVERAGE%"
          echo "Badge Color: $COLOR"
          
          # Ensure the badge directory exists
          mkdir -p badges/${{ steps.extract_branch.outputs.branch }}
          
          # Download and save the badge
          curl -o badges/${{ steps.extract_branch.outputs.branch }}/badge.svg \
            "https://img.shields.io/badge/Test%20Coverage-$COVERAGE%25-$COLOR.svg"


      - name: Commit and Push Badge
        run: |
          cd badges
          ls -lah  # Debugging step to confirm files exist
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Ensure the badge file exists before adding it
          if [ -f "${{ env.branch }}/badge.svg" ]; then
            git add "${{ env.branch }}/badge.svg"
            git commit -m "Add/Update badge" || echo "No changes to commit"
          
            # Push only if there were actual changes
            git push origin badges
          else
            echo "Badge file not found! Skipping commit and push."
          fi

